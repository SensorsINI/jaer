/*
 * Copyright (C) 2024 tobi.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package net.sf.jaer.eventio;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author tobi
 */
public class TextFileInputStreamOptionsDialog extends javax.swing.JDialog implements PropertyChangeListener {

    TextFileInputStream textFileInputStream;

    /**
     * Creates new form TextFileInputStreamOptionsDialog
     *
     * @param parent the component to center over
     * @param modal whether the dialog takes over Swing thread or sits by it
     * live all the time
     * @param textFileInputStream the stream we control
     *
     */
    public TextFileInputStreamOptionsDialog(java.awt.Frame parent, boolean modal, TextFileInputStream textInputStream) {
        super(parent, modal);
        this.textFileInputStream = textInputStream;
        initComponents();
        getRootPane().setDefaultButton(closeButton);
        signedPolarityCB.setSelected(textInputStream.isUseSignedPolarity());
        csvCB.setSelected(textInputStream.isUseCSV());
        specialEventsCB.setSelected(textInputStream.isSpecialEvents());
        timestampsLastCB.setSelected(textInputStream.isTimestampLast());
        useUsTimestampsCB.setSelected(textInputStream.isUseUsTimestamps());
        setFormatString(textInputStream.getShortFormattingHintString());
        helpText.setContentType("text/html"); // https://stackoverflow.com/questions/13195131/how-to-use-html-tags-in-jtextarea
        setHelpText(textInputStream.getFormattingHelpString());
        textInputStream.addPropertyChangeListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleText = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        formatLabel = new javax.swing.JLabel();
        useUsTimestampsCB = new javax.swing.JCheckBox();
        timestampsLastCB = new javax.swing.JCheckBox();
        csvCB = new javax.swing.JCheckBox();
        signedPolarityCB = new javax.swing.JCheckBox();
        specialEventsCB = new javax.swing.JCheckBox();
        closeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sampleLineTF = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorTA = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        helpText = new javax.swing.JTextPane();
        eraseFileHashMapButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleText.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        titleText.setText("Set the format of the text file lines");

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 2, 15)); // NOI18N
        jLabel2.setText("Expected format");

        formatLabel.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        formatLabel.setText("jLabel3");

        useUsTimestampsCB.setText("us (int) timestamps, not float s");
        useUsTimestampsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useUsTimestampsCBActionPerformed(evt);
            }
        });

        timestampsLastCB.setText("timestamps last, not first");
        timestampsLastCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timestampsLastCBActionPerformed(evt);
            }
        });

        csvCB.setText("comma separation, not space");
        csvCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvCBActionPerformed(evt);
            }
        });

        signedPolarityCB.setText("signed polarity, not binary 0,1");
        signedPolarityCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signedPolarityCBActionPerformed(evt);
            }
        });

        specialEventsCB.setText("include special events");
        specialEventsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specialEventsCBActionPerformed(evt);
            }
        });

        closeButton.setMnemonic('c');
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Last line");

        sampleLineTF.setText("(lines will appear here)");

        errorTA.setEditable(false);
        errorTA.setColumns(20);
        errorTA.setRows(5);
        jScrollPane2.setViewportView(errorTA);

        helpText.setEditable(false);
        jScrollPane3.setViewportView(helpText);

        eraseFileHashMapButton.setText("Erase hashed values for file lengths");
        eraseFileHashMapButton.setToolTipText("Erases the HashMap that stores previously read file sizes to avoid rereading them every time you open the same file path");
        eraseFileHashMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseFileHashMapButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(closeButton)
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(formatLabel)
                                .addGap(66, 66, 66))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(useUsTimestampsCB)
                                    .addComponent(timestampsLastCB)
                                    .addComponent(csvCB)
                                    .addComponent(signedPolarityCB)
                                    .addComponent(specialEventsCB)
                                    .addComponent(eraseFileHashMapButton))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleText)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(sampleLineTF)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(titleText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(formatLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useUsTimestampsCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timestampsLastCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(csvCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(signedPolarityCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(specialEventsCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eraseFileHashMapButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sampleLineTF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(closeButton)
                        .addContainerGap())
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void csvCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvCBActionPerformed
        textFileInputStream.setUseCSV(csvCB.isSelected());
    }//GEN-LAST:event_csvCBActionPerformed

    private void useUsTimestampsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useUsTimestampsCBActionPerformed
        textFileInputStream.setUseUsTimestamps(useUsTimestampsCB.isSelected());
    }//GEN-LAST:event_useUsTimestampsCBActionPerformed

    private void timestampsLastCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timestampsLastCBActionPerformed
        textFileInputStream.setTimestampLast(timestampsLastCB.isSelected());
    }//GEN-LAST:event_timestampsLastCBActionPerformed

    private void signedPolarityCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signedPolarityCBActionPerformed
        textFileInputStream.setUseSignedPolarity(signedPolarityCB.isSelected());
    }//GEN-LAST:event_signedPolarityCBActionPerformed

    private void specialEventsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specialEventsCBActionPerformed
        textFileInputStream.setSpecialEvents(specialEventsCB.isSelected());
    }//GEN-LAST:event_specialEventsCBActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void eraseFileHashMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseFileHashMapButtonActionPerformed
        textFileInputStream.eraseFileHashMap();
    }//GEN-LAST:event_eraseFileHashMapButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextFileInputStreamOptionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextFileInputStreamOptionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextFileInputStreamOptionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextFileInputStreamOptionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TextFileInputStreamOptionsDialog dialog = new TextFileInputStreamOptionsDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox csvCB;
    private javax.swing.JButton eraseFileHashMapButton;
    private javax.swing.JTextArea errorTA;
    private javax.swing.JLabel formatLabel;
    private javax.swing.JTextPane helpText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel sampleLineTF;
    private javax.swing.JCheckBox signedPolarityCB;
    private javax.swing.JCheckBox specialEventsCB;
    private javax.swing.JCheckBox timestampsLastCB;
    private javax.swing.JLabel titleText;
    private javax.swing.JCheckBox useUsTimestampsCB;
    // End of variables declaration//GEN-END:variables

    void setFormatString(String s) {
        formatLabel.setText(s);
    }
    
    void setHelpText(String s){
        helpText.setText(s);
    }

    void setSampleLine(String s) {
        sampleLineTF.setText(s);
    }
    
    void setErrorMessage(String s){
        errorTA.setText(s);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() instanceof TextFileInputStream) {
            if (evt.getPropertyName().equals("format")) {
                setFormatString(textFileInputStream.getShortFormattingHintString());
                setHelpText(textFileInputStream.getFormattingHelpString());
            } else if (evt.getPropertyName().equals("sampleLine")) {
                setSampleLine((String) evt.getNewValue());
            } else if (evt.getPropertyName().equals("lastError")) {
                setErrorMessage((String) evt.getNewValue());
            }
        }
    }
}
